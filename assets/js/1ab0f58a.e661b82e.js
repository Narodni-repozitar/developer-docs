"use strict";(self.webpackChunknrp_tech_docs=self.webpackChunknrp_tech_docs||[]).push([[942],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=c(t),f=i,h=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return t?r.createElement(h,l(l({ref:n},p),{},{components:t})):r.createElement(h,l({ref:n},p))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,l=new Array(o);l[0]=f;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a[d]="string"==typeof e?e:i,l[1]=a;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},8721:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const o={},l="Files",a={unversionedId:"technology/invenio/nrp-toolchain/plugins/files",id:"technology/invenio/nrp-toolchain/plugins/files",title:"Files",description:"Plugin adding support for working with files based on the invenio model.",source:"@site/docs/technology/invenio/nrp-toolchain/plugins/files.md",sourceDirName:"technology/invenio/nrp-toolchain/plugins",slug:"/technology/invenio/nrp-toolchain/plugins/files",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/plugins/files",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/technology/invenio/nrp-toolchain/plugins/files.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Expansions",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/plugins/expansions"},next:{title:"I18N values",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/plugins/i18n"}},s={},c=[{value:"Api",id:"api",level:2},{value:"Example",id:"example",level:2}],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"files"},"Files"),(0,i.kt)("p",null,'Plugin adding support for working with files based on the invenio model.\nFiles are represented as another ("file") record connected with the original parent one.\nThe plugin generates the file record and modifies the parent record to create connection with new file one.\nThe file record is specified under "files" attribute in the model yaml file, see example\nin tests.'),(0,i.kt)("p",null,'The plugin runs the original model builder on the files model in "files" profile,\nreusing a lot of the model builder code with different configuration, notably with different\nbase classes for record, service, resource and config classes.\nTo get an idea which code is reused, see entrypoints. For configuration changes, see model preprocessors.'),(0,i.kt)("h2",{id:"api"},"Api"),(0,i.kt)("p",null,"The files plugin provides an api for working with files.\nThe api is by default accessible at {original model url}/{base record id}/files.\nThe api is taken from InvenioRDM, the docs are ",(0,i.kt)("a",{parentName:"p",href:"https://inveniordm.docs.cern.ch/reference/rest_api_drafts_records/#record-files"},"here")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"A simple record with associated files can be defined as this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"model:\n  properties:\n    metadata:\n      properties:\n        title:\n          type: fulltext\n        status:\n          type: keyword\n  package: thesis\n  schema-server: 'local://'\n  use:\n    - invenio\n\nfiles:\n  properties:\n    metadata:\n      properties:\n        title:\n          type: fulltext\n  package: thesis\n  schema-server: 'local://'\n  use:\n    - invenio_files\n")),(0,i.kt)("p",null,"Using the api, first an\ninstance of the model has to be created. Then an instance of the\nassociated file record. The file content is then uploaded in separate step and\nfinally the upload must be commited."))}u.isMDXComponent=!0}}]);