"use strict";(self.webpackChunknrp_tech_docs=self.webpackChunknrp_tech_docs||[]).push([[157],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),d=p(a),u=l,h=d["".concat(s,".").concat(u)]||d[u]||c[u]||i;return a?n.createElement(h,o(o({ref:t},m),{},{components:a})):n.createElement(h,o({ref:t},m))}));function h(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,o=new Array(i);o[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[d]="string"==typeof e?e:l,o[1]=r;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4359:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var n=a(7462),l=(a(7294),a(3905));const i={},o="NRP toolchain",r={unversionedId:"technology/invenio/nrp-toolchain/index",id:"technology/invenio/nrp-toolchain/index",title:"NRP toolchain",description:"NRP toolchain is a command-line tool (nrp-cli) and associated set of libraries",source:"@site/docs/technology/invenio/nrp-toolchain/index.md",sourceDirName:"technology/invenio/nrp-toolchain",slug:"/technology/invenio/nrp-toolchain/",permalink:"/docs/technology/invenio/nrp-toolchain/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/technology/invenio/nrp-toolchain/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Invenio repository architecture",permalink:"/docs/technology/invenio/architecture"}},s={},p=[{value:"Initializing the repository",id:"initializing-the-repository",level:2},{value:"Model",id:"model",level:2},{value:"Model structure",id:"model-structure",level:3},{value:"Scaffolding a model",id:"scaffolding-a-model",level:3},{value:"<code>nrp-cli model add &lt;name&gt;</code>",id:"nrp-cli-model-add-name",level:4},{value:"Defining the model",id:"defining-the-model",level:4},{value:"Simple types",id:"simple-types",level:5},{value:"String types",id:"string-types",level:5},{value:"Arrays",id:"arrays",level:5},{value:"Complex values",id:"complex-values",level:5},{value:"Custom types",id:"custom-types",level:5},{value:"Structuring metadata file",id:"structuring-metadata-file",level:4},{value:"I18n annotations",id:"i18n-annotations",level:4},{value:"Languages",id:"languages",level:5},{value:"Marshmallow annotations",id:"marshmallow-annotations",level:4},{value:"Adding extra arguments on marshmallow fields",id:"adding-extra-arguments-on-marshmallow-fields",level:5},{value:"Validators",id:"validators",level:5},{value:"Using custom marshmallow fields",id:"using-custom-marshmallow-fields",level:5},{value:"Generating schema class for objects",id:"generating-schema-class-for-objects",level:5},{value:"Custom class name",id:"custom-class-name",level:6},{value:"Package name",id:"package-name",level:6},{value:"Using already written class",id:"using-already-written-class",level:6},{value:"Custom base classes",id:"custom-base-classes",level:6},{value:"Imported packages/classes",id:"imported-packagesclasses",level:5},{value:"Complete control on fields",id:"complete-control-on-fields",level:5},{value:"Dump-only and load-only properties",id:"dump-only-and-load-only-properties",level:5},{value:"<code>nrp-cli model compile &lt;name&gt;</code>",id:"nrp-cli-model-compile-name",level:4},{value:"<code>nrp-cli model install &lt;name&gt;</code>",id:"nrp-cli-model-install-name",level:4}],m={toc:p};function d(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"nrp-toolchain"},"NRP toolchain"),(0,l.kt)("p",null,"NRP toolchain is a command-line tool (nrp-cli) and associated set of libraries\nthat help with creating, evolving and upgrading a repository based on the\ninvenio platform."),(0,l.kt)("p",null,"The toolchain brings:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"standardized layout of python packages on your disk/git repository (monorepo)"),(0,l.kt)("li",{parentName:"ul"},"command-line tool to build the whole API layer from a single description file"),(0,l.kt)("li",{parentName:"ul"},"simple to use templates for building your own UI layer"),(0,l.kt)("li",{parentName:"ul"},"pre-installed components to interact with other parts of NRP infrastructure")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note:")," if you want to build your own repository which uses the NRP dataset\nor document metadata schema, in most cases you do not have to develop your own\nrepository - just use one of the pre-built images and configure them. See\n",(0,l.kt)("a",{parentName:"p",href:".."},"NRP Invenio")," for details."),(0,l.kt)("h2",{id:"initializing-the-repository"},"Initializing the repository"),(0,l.kt)("p",null,"To create a new repository, go to ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oarepo/nrp-cli"},"nrp-cli github repository"),"\nand download the initialization script ",(0,l.kt)("inlineCode",{parentName:"p"},"nrp-installer.sh"),". Inspect its content (it is always good\nto inspect files before running them) and invoke it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"bash nrp-installer.sh my-repository\n")),(0,l.kt)("p",null,"This command will ask you a couple of questions (if unsure, use the defaults)\nand will create ",(0,l.kt)("inlineCode",{parentName:"p"},"my-repository")," directory:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-directory"},"my-repository\n   oarepo.yaml\n   nrp-cli\n   invenio-cli\n\n   sites\n      my-repository-site\n   locals  (might be missing and created later)\n   models  (might be missing and created later)\n   ui      (might be missing and created later)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Files/directories"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nrp-cli")," is the command that will scaffold other parts and help you with using them in your repository"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"invenio-cli")," is the normal invenio command-line tool, just pre-installed for you"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sites")," is a directory where you will have your invenio instances. The installer generates one for you. Within the instance you can add/remove python modules, configure skin and repository parameters and perform repository management tasks."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"locals")," is a directory where you can store your local libraries installed into the site. These might include, for example, metadata extraction code, specialized validations, connectors to external applications and services. Use this directory if you want to add more functionality but you do not want to build it (yet) into separate python packages."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"models")," is a directory containing all the code to build an API server. Here you will find all the resources, services, records, marshmallow schemas, json schemas, permissions, opensearch index definitions and other parts. ",(0,l.kt)("inlineCode",{parentName:"li"},"nrp-cli")," can generate these files for you - see below"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ui")," is a directory where user interface for the models will be stored. Using ",(0,l.kt)("inlineCode",{parentName:"li"},"nrp-cli")," you can generate an initial user interface from a model.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Running your repository"),":"),(0,l.kt)("p",null,"Go to the repository directory and run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./nrp-cli run\n")),(0,l.kt)("p",null,"After a couple of seconds, your new (and empty) repository will pop up at ",(0,l.kt)("a",{parentName:"p",href:"https://localhost:5000/"},"https://localhost:5000/")),(0,l.kt)("h2",{id:"model"},"Model"),(0,l.kt)("h3",{id:"model-structure"},"Model structure"),(0,l.kt)("p",null,"In invenio, model consists of multiple python (and non-python files) that have to work together and stay consistent when changes are introduced.\nThese files (and classes) are:"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Resource layer (http):")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"resources/config.py"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"defines the URL of the model, content negotiation"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"resources/resource.py"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"parses the HTTP request and calls the service layer to handle it"),(0,l.kt)("li",{parentName:"ul"},"modify this file if you want to add your own endpoints")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Service layer (business logic):")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"services/config.py")," contain the definition of:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the primary url of the model (",(0,l.kt)("strong",{parentName:"li"},"TODO")," unify this with resources, not done in invenio)"),(0,l.kt)("li",{parentName:"ul"},"permission policies for the service (referenced from config, defined in ",(0,l.kt)("inlineCode",{parentName:"li"},"permissions.py"),")"),(0,l.kt)("li",{parentName:"ul"},"Marshmallow schema that will be used for deposit validation (referenced from config, defined in ",(0,l.kt)("inlineCode",{parentName:"li"},"schema.py"),")"),(0,l.kt)("li",{parentName:"ul"},"Search options - what can be searched, ordered, aggregated (referenced from config, defined in ",(0,l.kt)("inlineCode",{parentName:"li"},"search.py")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"facets.py"),")"),(0,l.kt)("li",{parentName:"ul"},"Extension points (components) to plug into the standard CRUD processing without rewriting service"),(0,l.kt)("li",{parentName:"ul"},"link to record layer"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"services/service.py"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"implements the business layer of the model"),(0,l.kt)("li",{parentName:"ul"},"the standard CRUD+search is already contained"),(0,l.kt)("li",{parentName:"ul"},"you might add specialized methods here (and call them from the resource layer if they should be accessible via API)")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Record layer (data access):")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"jsonschemas/**")," - json schema of the metadata"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mappings/**")," - definition of elasticsearch mappings (json similar to json schema, but not the same)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"api.py")," - defines the Record class to store the metadata"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dumper.py")," - contains code that is used when storing the metadata and retrieving them from OpenSearch"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"models.py")," - contains the low-level SQLAlchemy access to the database")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Top-level")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"config.py")," - default configuration"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ext.py")," - flask registration code for the model"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"views.py")," - registration of the API endpoint"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"proxies.py")," - defines flask proxies to use the service/resource from another model")),(0,l.kt)("h3",{id:"scaffolding-a-model"},"Scaffolding a model"),(0,l.kt)("p",null,"To simplify model development, nrp-cli provides the following tools:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nrp-cli model add <name>")," will add a model to the repository"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nrp-cli model compile <name>")," compiles the model and generates invenio source files"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nrp-cli model install <name>")," installs the model into a given site")),(0,l.kt)("h4",{id:"nrp-cli-model-add-name"},(0,l.kt)("inlineCode",{parentName:"h4"},"nrp-cli model add <name>")),(0,l.kt)("p",null,"This command initializes a new model. It will add ",(0,l.kt)("inlineCode",{parentName:"p"},"models/<name>")," directory and create two files in it:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"model.yaml")," contains a code for NRP generator (invoked by ",(0,l.kt)("inlineCode",{parentName:"li"},"nrp-cli model compile"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"metadata.yaml")," defines your metadata in a superset of jsonschema and opensearch mapping")),(0,l.kt)("p",null,"Having a ",(0,l.kt)("inlineCode",{parentName:"p"},"metadata.yaml")," from which all other invenio files are generated makes sure that all the files\nare in sync and saves you the tedious task of writing them by hand. This solution is also future-proof -\nif a new version of invenio, which is not backwards compatible, is released, NRP toolchain will be upgraded\nand a new model can be generated again."),(0,l.kt)("p",null,"The command will ask you if you want to inherit the model from a well-known schema or start from scratch.\nSee the schema browser in ",(0,l.kt)("strong",{parentName:"p"},"TODO: reference to NRK/docs when it is ready")," for the comparison of those\nschemas."),(0,l.kt)("h4",{id:"defining-the-model"},"Defining the model"),(0,l.kt)("p",null,"Now edit the ",(0,l.kt)("inlineCode",{parentName:"p"},"metadata.yaml"),". The initial metadata schema will be an empty object,\nfeel free to add your own properties:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"title:\n   type: fulltext\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Key in the object is the name of the property"),(0,l.kt)("li",{parentName:"ul"},'Value is always an object. It contains a required property "type" that gives the type of the object.')),(0,l.kt)("p",null,"The file can be in ",(0,l.kt)("a",{parentName:"p",href:"https://circleci.com/blog/what-is-yaml-a-beginner-s-guide/"},"yaml (extension .yaml)")," or json5 file format, yaml is recommended. If you change the extension,\nbe sure to change the reference in ",(0,l.kt)("inlineCode",{parentName:"p"},"model.yaml")," file. To edit the file, we recommend using VS Code with RedHat's\nYAML extension."),(0,l.kt)("p",null,"Feel free to document the file/properties with comments starting with '#', just mind the nesting:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"myprop:\n   # this is a comment\n   type: keyword\n")),(0,l.kt)("h5",{id:"simple-types"},"Simple types"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"integer"),(0,l.kt)("li",{parentName:"ul"},"float"),(0,l.kt)("li",{parentName:"ul"},"date"),(0,l.kt)("li",{parentName:"ul"},"time"),(0,l.kt)("li",{parentName:"ul"},"datetime"),(0,l.kt)("li",{parentName:"ul"},"boolean")),(0,l.kt)("h5",{id:"string-types"},"String types"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'fulltext - will be indexed as type="text" in opensearch'),(0,l.kt)("li",{parentName:"ul"},'keyword - will be indexed as type="keyword" in opensearch'),(0,l.kt)("li",{parentName:"ul"},'fulltext+kyword - will become type="text" with subfield keyword=(type:keyword)')),(0,l.kt)("h5",{id:"arrays"},"Arrays"),(0,l.kt)("p",null,"Arrays can be written in JSON Schema form or in a shortcut notation:"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"JSONSchema-like"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"tags:\n   type: array\n   ^label.en: Tags   # UI extension defining label\n   items:\n      type: keyword\n      minLength: 3\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Shortcut notation"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"tags[]:\n   type: keyword\n   ^label.en: Tags\n   minLength[]: 3\n")),(0,l.kt)("p",null,"In this notation, properties without ",(0,l.kt)("inlineCode",{parentName:"p"},"[]")," suffix are used for the array element,\nproperties with ",(0,l.kt)("inlineCode",{parentName:"p"},"[]")," are moved into the array item (the same way as brackets are\nused in the programming language - in declaration they mean array, when used elsewhere\nthey access array member)."),(0,l.kt)("h5",{id:"complex-values"},"Complex values"),(0,l.kt)("p",null,"As we need to distinguish between nested and object data type,\ncomplex values (object values) are written with types 'object' or 'nested'.\nSee ",(0,l.kt)("a",{parentName:"p",href:"https://opensearch.org/docs/1.3/opensearch/supported-field-types/nested/"},"Opensearch documentation"),"\nfor the differences between the two."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example:")),(0,l.kt)("p",null,"Use Case: I want to filter all articles by John Smith with MIT affiliation. This means that cross-field search is required\nand nested data type should be used."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"authors[]:\n   type: nested\n   properties:\n      name: \n         type: keyword\n      affiliation:\n         type: keyword \n")),(0,l.kt)("p",null,'If cross-field search will never be required, use "object" data type:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"authors[]:\n   type: object\n   properties:\n      name: \n         type: keyword\n      affiliation:\n         type: keyword \n")),(0,l.kt)("p",null,"As a shortcut, you can omit the ",(0,l.kt)("inlineCode",{parentName:"p"},"type: object"),' - it will be added automatically if there is "properties" inside "authors":'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"authors[]:\n   properties:\n      name: \n         type: keyword\n      affiliation:\n         type: keyword \n")),(0,l.kt)("h5",{id:"custom-types"},"Custom types"),(0,l.kt)("p",null,"Custom types might be added via plugin to oarepo-model-builder. See ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oarepo/oarepo-model-builder-multilingual"},"i18n plugin"),"\nfor an example of extending the builder."),(0,l.kt)("h4",{id:"structuring-metadata-file"},"Structuring metadata file"),(0,l.kt)("p",null,"You can put repeated blocks to a separate file and include them:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# metadata.yaml\nauthors[]:\n   ^use: person.yaml\ncontributors[]:\n   ^use: person.yaml\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# person.yaml\ntype: object\nproperties:\n   name:\n      type: keyword\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Note:")," ",(0,l.kt)("inlineCode",{parentName:"p"},"^")," character in front of a key is a special character that gives commands to the generator. You will see it later\nwhen further describing the model."),(0,l.kt)("p",null,"JSON pointer can be used to take just a part of file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'# metadata.yaml\nauthors[]:\n   ^use: "defs.yaml#/Person"\ncontributors[]:\n   ^use: "person.yaml#/Person"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# defs.yaml\nPerson:\n   type: object\n   properties:\n      name:\n         type: keyword\n")),(0,l.kt)("p",null,"For readability we highly recommend splitting the metadata into multiple files and linking them via ",(0,l.kt)("inlineCode",{parentName:"p"},"^use"),".\nYou can even put these into a python library - see ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oarepo/oarepo-model-builder"},"oarepo-model-builder")," for details."),(0,l.kt)("h4",{id:"i18n-annotations"},"I18n annotations"),(0,l.kt)("p",null,"Properties in the metadata file can have proper labels, tooltips and editor hints:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"title:\n   type: fulltext\n   ^label.en: Article title\n   # tooltip used on the detail page\n   ^tooltip.en: |\n      any tooltip here, even\n      on multiple lines\n   # hint for deposit interface\n   ^hint.en: Copy/paste this from the journal site\n")),(0,l.kt)("p",null,'You can separate them to the "^ui" property if you want:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'title:\n   type: fulltext\n   ^ui:\n      label.en: Article title\n      # tooltip passed to html "title" attribute\n      tooltip.en: |\n         any tooltip here, even\n         on multiple lines\n      # hint for deposit interface\n      hint.en: Copy/paste this from the journal site\n')),(0,l.kt)("h5",{id:"languages"},"Languages"),(0,l.kt)("p",null,"The labels/tooltip/... MUST have a language associated. If you want to translate them to other languages:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Duplicate the property with another language (this does not scale for more then 2-3 languages):",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"^label.en: Article title\n^label.cs: N\xe1zev \u010dl\xe1nku\n"))),(0,l.kt)("li",{parentName:"ol"},'Use a special ".key" language - this will turn into the exact "key" in translation files (for example, msgid in GNU gettext):',(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"^label.key: model.article.title\n")),"and you can translate this afterwards in your translation software.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"TODO")," look at this - invenio uses Transifex, but it is a paid product ($70/month minimum)\nWe can use '.po' which is common in translation community and convert to json afterwards"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"TODO"),": integrate i18n to nrp-cli - i18n make, i18n compile"),(0,l.kt)("h4",{id:"marshmallow-annotations"},"Marshmallow annotations"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://marshmallow.readthedocs.io/en/stable/"},"Marshmallow")," is a library\nthat is used inside Invenio to validate json content of API uploads/UI deposits.\nMarshmallow schema files are generated for you automatically from the model's metadata."),(0,l.kt)("p",null,"To customize the classes/fields generated, you can add ",(0,l.kt)("inlineCode",{parentName:"p"},"^marshmallow")," annotation into your\nmodel definition."),(0,l.kt)("h5",{id:"adding-extra-arguments-on-marshmallow-fields"},"Adding extra arguments on marshmallow fields"),(0,l.kt)("p",null,"You can add list of arguments on the generated marshmallow field:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'amount:\n   type: integer\n   ^marshmallow:\n      arguments: ["strict=True", "just_to_illustrate=1"]\n')),(0,l.kt)("p",null,"will generate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"amount = ma_fields.IntegerField(strict=True, just_to_illustrate=1)\n")),(0,l.kt)("h5",{id:"validators"},"Validators"),(0,l.kt)("p",null,"A list of validators can be specified. Be sure to import them with ",(0,l.kt)("inlineCode",{parentName:"p"},"imports")," property."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'amount:\n   type: integer\n   ^marshmallow:\n      validators: ["greater_than_zero"]\n      imports:\n        - import: mypkg.utils.greater_than_zero\n')),(0,l.kt)("p",null,"will generate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"amount = ma_fields.IntegerField(validators=[greater_than_zero])\n")),(0,l.kt)("h5",{id:"using-custom-marshmallow-fields"},"Using custom marshmallow fields"),(0,l.kt)("p",null,"To use a custom field class (instead, for example, ma_fields.IntegerField) pass the ",(0,l.kt)("inlineCode",{parentName:"p"},"field-class")," property:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"amount:\n   type: integer\n   ^marshmallow:\n      field-class: MyIntegerField\n      imports:\n        - import: mypkg.fields.MyIntegerField\n")),(0,l.kt)("p",null,"will generate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"amount = MyIntegerField(...)\n")),(0,l.kt)("h5",{id:"generating-schema-class-for-objects"},"Generating schema class for objects"),(0,l.kt)("p",null,"For object/nested types, a marshmallow schema class is automatically generated.\nThe class name is created by capitalizing the name of the property and adding Schema\nto the end of it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"structure:\n  type: object\n")),(0,l.kt)("p",null,"will generate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class StructureSchema(ma.Schema):\n   ....\n\nclass MetadataSchema(ma.Schema):\n   structure = ma_fields.Nested(lambda: StructureSchema())\n")),(0,l.kt)("p",null,"The lambda is added so that we can have circular usages and do not have to rely on the order of classes in the generated schema file."),(0,l.kt)("h6",{id:"custom-class-name"},"Custom class name"),(0,l.kt)("p",null,"A custom name can be supplied:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"structure:\n  type: object\n  ^marshmallow:\n    schema-class: MyClassNameForStructureSchema\n")),(0,l.kt)("p",null,"will generate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class MyClassNameForStructureSchema(ma.Schema):\n   ....\n\nclass MetadataSchema:\n   structure = ma_fields.Nested(lambda: MyClassNameForStructureSchema())\n")),(0,l.kt)("h6",{id:"package-name"},"Package name"),(0,l.kt)("p",null,"If you do not specify package in class name, it will be generated to the same file.\nIf '.' is present in the class name, the class will be generated to the given package.\nFor example, ",(0,l.kt)("inlineCode",{parentName:"p"},"schema-class: a.b.CSchema")," will be generated to ",(0,l.kt)("inlineCode",{parentName:"p"},"a/b.py"),"."),(0,l.kt)("h6",{id:"using-already-written-class"},"Using already written class"),(0,l.kt)("p",null,"Sometimes you would like to use your own class and do not generate it. To do so,\nset ",(0,l.kt)("inlineCode",{parentName:"p"},"generate: false")," together with the class name:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"structure:\n  type: object\n  ^marshmallow:\n    generate: false\n    schema-class: pkg.NotGeneratedSchema\n")),(0,l.kt)("h6",{id:"custom-base-classes"},"Custom base classes"),(0,l.kt)("p",null,"If you would like to have the schema generated but want to have your own base class instead of ma.Schema, set ",(0,l.kt)("inlineCode",{parentName:"p"},"base-classes")," marshmallow property. This way you can also include any number of mixins:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'structure:\n  type: object\n  ^marshmallow:\n    base-classes: [ "mypkg.MyBaseClass" ]\n\n')),(0,l.kt)("h5",{id:"imported-packagesclasses"},"Imported packages/classes"),(0,l.kt)("p",null,"You can add imports/import aliases with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"^marshmallow:\n   imports:\n      - import: mypkg.MyClass\n        alias: MyClassAlias \n")),(0,l.kt)("p",null,"will generate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import mypkg.MyClass as MyClassAlias\n")),(0,l.kt)("p",null,"If the alias is omitted, and ",(0,l.kt)("inlineCode",{parentName:"p"},"import mypkg.MyClass")," is generated."),(0,l.kt)("h5",{id:"complete-control-on-fields"},"Complete control on fields"),(0,l.kt)("p",null,"In rare cases you might want to skip the generator and just use your own instantiated field. To do so, specify ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," property:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"fld:\n   ^marshmallow:\n      field: \"mypkg.MyField(required=False, other_prop='Hello world')\"\n")),(0,l.kt)("p",null,"This will copy the definition, without any processing:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"fld = mypkg.MyField(required=False, other_prop='Hello world')\n")),(0,l.kt)("h5",{id:"dump-only-and-load-only-properties"},"Dump-only and load-only properties"),(0,l.kt)("p",null,"In rare cases cases:"),(0,l.kt)("p",null,"To have a dump-only property (such as one that is generated by a service and can not be directly edited),\nset ",(0,l.kt)("inlineCode",{parentName:"p"},"write: false")," on the marshmallow definition. To have a write-only field, add ",(0,l.kt)("inlineCode",{parentName:"p"},"read:false"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"auto_field:\n  ^marshmallow:\n    read: true          # default value\n    write: false\n")),(0,l.kt)("h4",{id:"nrp-cli-model-compile-name"},(0,l.kt)("inlineCode",{parentName:"h4"},"nrp-cli model compile <name>")),(0,l.kt)("h4",{id:"nrp-cli-model-install-name"},(0,l.kt)("inlineCode",{parentName:"h4"},"nrp-cli model install <name>")))}d.isMDXComponent=!0}}]);