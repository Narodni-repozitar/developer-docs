"use strict";(self.webpackChunknrp_tech_docs=self.webpackChunknrp_tech_docs||[]).push([[635],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),u=i,m=d["".concat(s,".").concat(u)]||d[u]||f[u]||o;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8110:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const o={},a="Expansions",l={unversionedId:"technology/invenio/nrp-toolchain/plugins/expansions",id:"technology/invenio/nrp-toolchain/plugins/expansions",title:"Expansions",description:"Plugin for oarepo-model-builder to allow invenio expandable fields. Expandable fields allow saving fields of other referenced records in the referencing record object.",source:"@site/docs/technology/invenio/nrp-toolchain/plugins/expansions.md",sourceDirName:"technology/invenio/nrp-toolchain/plugins",slug:"/technology/invenio/nrp-toolchain/plugins/expansions",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/plugins/expansions",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/technology/invenio/nrp-toolchain/plugins/expansions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Custom fields",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/plugins/custom_fields"},next:{title:"Files",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/plugins/files"}},s={},c=[{value:"Example",id:"example",level:2}],p={toc:c},d="wrapper";function f(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"expansions"},"Expansions"),(0,i.kt)("p",null,"Plugin for oarepo-model-builder to allow invenio expandable fields. Expandable fields allow saving fields of other referenced records in the referencing record object.\nExpandable fields are specified on model level as a list and the yaml for\nsingle expandable field has following structure:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"field name")," path to the field in the referencing record"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"referenced keys")," list of paths to the fields in the referenced record"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"service")," service for the referenced record, used to retrieve the referenced\nrecord to get the field values"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"service-alias")," not required, specify alias for the service in the previous option"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pid-field")," not required, specify the field in the referencing record holding the\npid of the referenced record."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"expandable-field-class")," not required, specify the class of the expandable\nfield, by default it's ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/oarepo/oarepo-runtime/blob/main/oarepo_runtime/expansions/expandable_fields.py"},"oarepo_runtime.expansions.expandable_fields.ReferencedRecordExpandableField"))),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"A simple example of a referencing record with expandable fields can be defined as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"model:\n  properties:\n    metadata:\n      properties:  # to add yout own properties, remove this line and uncomment the next one\n        main-title:\n          type: fulltext\n        file:\n          properties:\n           id:\n             type: keyword\n          sample:\n            skip: true\n  use:\n    - invenio\n  package: model_document\n  schema-server: 'local://'\n  expandable-fields:\n    - field-name: metadata.file\n      referenced-keys:\n      - metadata.filename\n      - metadata.filesize\n      service: model_file.proxies.current_service\n")),(0,i.kt)("p",null,"And the associated referenced record:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"model:\n  properties:\n    metadata:\n      properties:  # to add yout own properties, remove this line and uncomment the next one\n        filename:\n          type: fulltext\n        licence:\n          type: keyword\n        filesize:\n          type: integer\n  use:\n  - invenio\n  package: model_file\n  schema-server: 'local://'\n")),(0,i.kt)("p",null,"The field-name attribute tells that the referencing record needs\na file entry in its metadata. Since pid-field is not specified,\nit is expected that the id of the referenced record is in metadata.file.id\non the referencing record."),(0,i.kt)("p",null,"The referenced-keys tell which keys of the referenced record are\nto be included in the expandable field. And the service attribute\nspecifies the service which fetches the referenced record."))}f.isMDXComponent=!0}}]);