"use strict";(self.webpackChunknrp_tech_docs=self.webpackChunknrp_tech_docs||[]).push([[981],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(a),u=l,h=m["".concat(i,".").concat(u)]||m[u]||c[u]||r;return a?n.createElement(h,o(o({ref:t},d),{},{components:a})):n.createElement(h,o({ref:t},d))}));function h(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[m]="string"==typeof e?e:l,o[1]=s;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4307:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var n=a(7462),l=(a(7294),a(3905));const r={sidebar_position:4},o="Edit the metadata",s={unversionedId:"technology/invenio/nrp-toolchain/edit-metadata",id:"technology/invenio/nrp-toolchain/edit-metadata",title:"Edit the metadata",description:"See metadata cheat sheet as a quick reference.",source:"@site/docs/technology/invenio/nrp-toolchain/edit-metadata.md",sourceDirName:"technology/invenio/nrp-toolchain",slug:"/technology/invenio/nrp-toolchain/edit-metadata",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/edit-metadata",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/technology/invenio/nrp-toolchain/edit-metadata.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Scaffold a model",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/scaffold-model"},next:{title:"Generate the model",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/generate-model"}},i={},p=[{value:"Simple types",id:"simple-types",level:2},{value:"String types",id:"string-types",level:2},{value:"Arrays",id:"arrays",level:2},{value:"Complex values",id:"complex-values",level:2},{value:"Custom types",id:"custom-types",level:2},{value:"Structuring metadata file",id:"structuring-metadata-file",level:2},{value:"I18n annotations",id:"i18n-annotations",level:2},{value:"Languages",id:"languages",level:3},{value:"Marshmallow (validation) annotations",id:"marshmallow-validation-annotations",level:2},{value:"Adding extra arguments on marshmallow fields",id:"adding-extra-arguments-on-marshmallow-fields",level:3},{value:"Validators",id:"validators",level:3},{value:"Using custom marshmallow fields",id:"using-custom-marshmallow-fields",level:3},{value:"Generating schema class for objects",id:"generating-schema-class-for-objects",level:3},{value:"Custom class name",id:"custom-class-name",level:4},{value:"Package name",id:"package-name",level:4},{value:"Using already written class",id:"using-already-written-class",level:4},{value:"Custom base classes",id:"custom-base-classes",level:4},{value:"Imported packages/classes",id:"imported-packagesclasses",level:3},{value:"Complete control on fields",id:"complete-control-on-fields",level:3},{value:"Dump-only and load-only properties",id:"dump-only-and-load-only-properties",level:5},{value:"Search options annotations",id:"search-options-annotations",level:2},{value:"Facets creation",id:"facets-creation",level:3},{value:"Facets additional definition",id:"facets-additional-definition",level:3}],d={toc:p};function m(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"edit-the-metadata"},"Edit the metadata"),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{target:"_blank",href:a(6445).Z},"metadata cheat sheet")," as a quick reference."),(0,l.kt)("p",null,"Now edit the ",(0,l.kt)("inlineCode",{parentName:"p"},"metadata.yaml"),". The initial metadata schema will be an empty object,\nfeel free to add your own properties:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"title:\n   type: fulltext\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Key in the object is the name of the property"),(0,l.kt)("li",{parentName:"ul"},'Value is always an object. It contains a required property "type" that gives the type of the object.')),(0,l.kt)("p",null,"For simpler cases you can use a shorthand notation:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"title: fulltext\n")),(0,l.kt)("p",null,"The file can be in ",(0,l.kt)("a",{parentName:"p",href:"https://circleci.com/blog/what-is-yaml-a-beginner-s-guide/"},"yaml (extension .yaml)")," or json5 file format, yaml is recommended. If you change the extension,\nbe sure to change the reference in ",(0,l.kt)("inlineCode",{parentName:"p"},"model.yaml")," file. To edit the file, we recommend using VS Code with RedHat's\nYAML extension."),(0,l.kt)("p",null,"Feel free to document the file/properties with comments starting with '#', just mind the nesting:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"myprop:\n   # this is a comment\n   type: keyword\n")),(0,l.kt)("h2",{id:"simple-types"},"Simple types"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"integer"),(0,l.kt)("li",{parentName:"ul"},"float"),(0,l.kt)("li",{parentName:"ul"},"date"),(0,l.kt)("li",{parentName:"ul"},"time"),(0,l.kt)("li",{parentName:"ul"},"datetime (date, time, datetime)"),(0,l.kt)("li",{parentName:"ul"},"edtf (edtf, edtf-interval)"),(0,l.kt)("li",{parentName:"ul"},"boolean")),(0,l.kt)("h2",{id:"string-types"},"String types"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'fulltext - will be indexed as type="text" in opensearch'),(0,l.kt)("li",{parentName:"ul"},'keyword - will be indexed as type="keyword" in opensearch'),(0,l.kt)("li",{parentName:"ul"},'fulltext+kyword - will become type="text" with subfield keyword=(type:keyword)')),(0,l.kt)("h2",{id:"arrays"},"Arrays"),(0,l.kt)("p",null,"Arrays can be written in JSON Schema form or in a shortcut notation:"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"JSONSchema-like"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"tags:\n   type: array\n   label.en: Tags   # UI extension defining label\n   items:\n      type: keyword\n      minLength: 3\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Shortcut notation"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"tags[]:\n   ^label.en: Tags\n   type: keyword\n   minLength[]: 3\n")),(0,l.kt)("p",null,"In this notation, properties with ",(0,l.kt)("inlineCode",{parentName:"p"},"^")," prefix are used for the array element,\nproperties without the suffix define array item."),(0,l.kt)("h2",{id:"complex-values"},"Complex values"),(0,l.kt)("p",null,"As we need to distinguish between nested and object data type,\ncomplex values (object values) are written with types 'object' or 'nested'.\nSee ",(0,l.kt)("a",{parentName:"p",href:"https://opensearch.org/docs/1.3/opensearch/supported-field-types/nested/"},"Opensearch documentation"),"\nfor the differences between the two."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example:")),(0,l.kt)("p",null,"Use Case: I want to filter all articles by John Smith with MIT affiliation. This means that cross-field search is required\nand nested data type must be used."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"authors[]:\n   type: nested\n   properties:\n      name: \n         type: keyword\n      affiliation:\n         type: keyword \n")),(0,l.kt)("p",null,'If cross-field search will never be required, use "object" data type:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"authors[]:\n   type: object\n   properties:\n      name: keyword\n      affiliation: keyword \n")),(0,l.kt)("p",null,"As a shortcut, you can omit the ",(0,l.kt)("inlineCode",{parentName:"p"},"type: object"),' - it will be added automatically if there is "properties" element inside "authors":'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"authors[]:\n   properties:\n      name: keyword\n      affiliation: keyword \n")),(0,l.kt)("p",null,"Another shortcut is to use ",(0,l.kt)("inlineCode",{parentName:"p"},"{}")," suffix with ",(0,l.kt)("inlineCode",{parentName:"p"},"^")," behaving the same way as in arrays:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'author{}:\n  ^label.en: Label of the "author" element\n  name: keyword\n  affiliation: keyword\n')),(0,l.kt)("h2",{id:"custom-types"},"Custom types"),(0,l.kt)("p",null,"Custom data types might be added via plugin to oarepo-model-builder. See ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oarepo/oarepo-model-builder-multilingual"},"i18n plugin"),"\nfor an example of extending the builder."),(0,l.kt)("h2",{id:"structuring-metadata-file"},"Structuring metadata file"),(0,l.kt)("p",null,"You can put repeated blocks to a separate file and include them:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# metadata.yaml\nauthors[]:\n   use: person.yaml\ncontributors[]:\n   use: person.yaml\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# person.yaml\ntype: object\nproperties:\n   name:\n      type: keyword\n")),(0,l.kt)("p",null,"JSON pointer can be used to take just a part of file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'# metadata.yaml\nauthors[]:\n   use: "defs.yaml#/Person"\ncontributors[]:\n   use: "person.yaml#/Person"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# defs.yaml\nPerson:\n   type: object\n   properties:\n      name:\n         type: keyword\n")),(0,l.kt)("p",null,"For readability we highly recommend splitting the metadata into multiple files and linking them via ",(0,l.kt)("inlineCode",{parentName:"p"},"use"),".\nYou can even put these into a python library - see ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oarepo/oarepo-model-builder"},"oarepo-model-builder")," for details."),(0,l.kt)("h2",{id:"i18n-annotations"},"I18n annotations"),(0,l.kt)("p",null,"Properties in the metadata file can have proper labels, tooltips and editor hints:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"title:\n   type: fulltext\n   label.en: Article title\n   tooltip.en: |\n      any tooltip here, even\n      on multiple lines\n   hint.en: Copy/paste this from the journal site\n   help.en: A longer help text shown, for example, after a click on '?'\n")),(0,l.kt)("p",null,"Note: these need the oarepo-model-builder-ui plugin to work."),(0,l.kt)("h3",{id:"languages"},"Languages"),(0,l.kt)("p",null,"The labels/tooltip/... MUST have a language associated. If you want to translate them to other languages:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Duplicate the property with another language (this does not scale for more then 2-3 languages):")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"   label.en: Article title\n   label.cs: N\xe1zev \u010dl\xe1nku\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},'Use a special ".key" language - this will turn into the exact "key" in translation files (for example, msgid in GNU gettext)\nand translate this afterwards in your translation software:')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"   label.key: model.article.title\n")),(0,l.kt)("h2",{id:"marshmallow-validation-annotations"},"Marshmallow (validation) annotations"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://marshmallow.readthedocs.io/en/stable/"},"Marshmallow")," is a library\nthat is used inside Invenio to validate json content of API uploads/UI deposits.\nMarshmallow schema files are generated for you automatically from the model's metadata."),(0,l.kt)("p",null,"To customize the classes/fields generated, you can add ",(0,l.kt)("inlineCode",{parentName:"p"},"marshmallow")," annotation into your\nmodel definition."),(0,l.kt)("h3",{id:"adding-extra-arguments-on-marshmallow-fields"},"Adding extra arguments on marshmallow fields"),(0,l.kt)("p",null,"You can add list of arguments on the generated marshmallow field:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'amount:\n   type: integer\n   marshmallow:\n      arguments: ["strict=True", "just_to_illustrate=1"]\n')),(0,l.kt)("p",null,"will generate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"amount = ma_fields.IntegerField(strict=True, just_to_illustrate=1)\n")),(0,l.kt)("h3",{id:"validators"},"Validators"),(0,l.kt)("p",null,"A list of validators can be specified. Be sure to import them with ",(0,l.kt)("inlineCode",{parentName:"p"},"imports")," property."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'amount:\n   type: integer\n   marshmallow:\n      validators: ["greater_than_zero"]\n      imports:\n        - import: mypkg.utils.greater_than_zero\n')),(0,l.kt)("p",null,"will generate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"amount = ma_fields.IntegerField(validators=[greater_than_zero])\n")),(0,l.kt)("h3",{id:"using-custom-marshmallow-fields"},"Using custom marshmallow fields"),(0,l.kt)("p",null,"To use a custom field class (instead, for example, ma_fields.IntegerField) pass the ",(0,l.kt)("inlineCode",{parentName:"p"},"field-class")," property:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"amount:\n   type: integer\n   marshmallow:\n      field-class: MyIntegerField\n      imports:\n        - import: mypkg.fields.MyIntegerField\n")),(0,l.kt)("p",null,"will generate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"amount = MyIntegerField(...)\n")),(0,l.kt)("h3",{id:"generating-schema-class-for-objects"},"Generating schema class for objects"),(0,l.kt)("p",null,"For object/nested types, a marshmallow schema class is automatically generated.\nThe class name is created by capitalizing the name of the property and adding Schema\nto the end of it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"structure:\n  type: object\n")),(0,l.kt)("p",null,"will generate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class StructureSchema(ma.Schema):\n   ....\n\nclass MetadataSchema(ma.Schema):\n   structure = ma_fields.Nested(lambda: StructureSchema())\n")),(0,l.kt)("p",null,"The lambda is added so that we can have circular usages and do not have to rely on the order of classes in the generated schema file."),(0,l.kt)("h4",{id:"custom-class-name"},"Custom class name"),(0,l.kt)("p",null,"A custom name can be supplied:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"structure:\n  type: object\n  marshmallow:\n    schema-class: MyClassNameForStructureSchema\n")),(0,l.kt)("p",null,"will generate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class MyClassNameForStructureSchema(ma.Schema):\n   ....\n\nclass MetadataSchema:\n   structure = ma_fields.Nested(lambda: MyClassNameForStructureSchema())\n")),(0,l.kt)("h4",{id:"package-name"},"Package name"),(0,l.kt)("p",null,"If you do not specify package in class name, it will be generated to the same file.\nIf '.' is present in the class name, the class will be generated to the given package.\nFor example, ",(0,l.kt)("inlineCode",{parentName:"p"},"schema-class: a.b.CSchema")," will be generated to ",(0,l.kt)("inlineCode",{parentName:"p"},"a/b.py"),"."),(0,l.kt)("h4",{id:"using-already-written-class"},"Using already written class"),(0,l.kt)("p",null,"Sometimes you would like to use your own class and do not generate it. To do so,\nset ",(0,l.kt)("inlineCode",{parentName:"p"},"generate: false")," together with the class name:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"structure:\n  type: object\n  marshmallow:\n    generate: false\n    schema-class: pkg.NotGeneratedSchema\n")),(0,l.kt)("h4",{id:"custom-base-classes"},"Custom base classes"),(0,l.kt)("p",null,"If you would like to have the schema generated but want to have your own base class instead of ma.Schema, set ",(0,l.kt)("inlineCode",{parentName:"p"},"base-classes")," marshmallow property. This way you can also include any number of mixins:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'structure:\n  type: object\n  marshmallow:\n    base-classes: [ "mypkg.MyBaseClass" ]\n\n')),(0,l.kt)("h3",{id:"imported-packagesclasses"},"Imported packages/classes"),(0,l.kt)("p",null,"You can add imports/import aliases with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"marshmallow:\n   imports:\n      - import: mypkg.MyClass\n        alias: MyClassAlias \n")),(0,l.kt)("p",null,"will generate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import mypkg.MyClass as MyClassAlias\n")),(0,l.kt)("p",null,"If the alias is omitted, and ",(0,l.kt)("inlineCode",{parentName:"p"},"import mypkg.MyClass")," is generated."),(0,l.kt)("h3",{id:"complete-control-on-fields"},"Complete control on fields"),(0,l.kt)("p",null,"In rare cases you might want to skip the generator and just use your own instantiated field. To do so, specify ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," property:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"fld:\n   marshmallow:\n      field: \"mypkg.MyField(required=False, other_prop='Hello world')\"\n")),(0,l.kt)("p",null,"This will copy the definition, without any processing:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"fld = mypkg.MyField(required=False, other_prop='Hello world')\n")),(0,l.kt)("h5",{id:"dump-only-and-load-only-properties"},"Dump-only and load-only properties"),(0,l.kt)("p",null,"In rare cases cases:"),(0,l.kt)("p",null,"To have a dump-only property (such as one that is generated by a service and can not be directly edited),\nset ",(0,l.kt)("inlineCode",{parentName:"p"},"write: false")," on the marshmallow definition. To have a write-only field, add ",(0,l.kt)("inlineCode",{parentName:"p"},"read:false"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"auto_field:\n  marshmallow:\n    read: true          # default value\n    write: false\n")),(0,l.kt)("h2",{id:"search-options-annotations"},"Search options annotations"),(0,l.kt)("p",null,"Options for creating facets and sorting rules can be specified within the model."),(0,l.kt)("h3",{id:"facets-creation"},"Facets creation"),(0,l.kt)("p",null,"It is possible to specify a Boolean ",(0,l.kt)("inlineCode",{parentName:"p"},"searchable")," field at the top level of the model. If this value is set to false, facets will not be created for any fields unless otherwise specified within the fields. By default, this value is set to true. The no-facet-creation setting does not apply to the Invenio default fields (id, $schema, created, updated).\nIn the example below, only facets for invenio fields will be generated, because the ",(0,l.kt)("inlineCode",{parentName:"p"},"searchable")," option is set to false."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"model": {\n                "use": "invenio",\n                "searchable" : false,\n                "properties": {\n                   "a" : "fulltext+keyword",\n                   "b" : "keyword"\n\n            },\n')),(0,l.kt)("p",null,"Will generate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'_id = TermsFacet(field = "id")\n\ncreated = TermsFacet(field = "created")\n\nupdated = TermsFacet(field = "updated")\n\n_schema = TermsFacet(field = "$schema")\n')),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"searchable")," option is not set or is set to true:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"model": {\n                "use": "invenio",\n                "properties": {\n                   "a" : "fulltext+keyword",\n                   "b" : "keyword"\n\n            },\n')),(0,l.kt)("p",null,"Will generate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'a_keyword = TermsFacet(field = "a.keyword")\n\nb = TermsFacet(field="b")\n\n_id = TermsFacet(field = "id")\n\ncreated = TermsFacet(field = "created")\n\nupdated = TermsFacet(field = "updated")\n\n_schema = TermsFacet(field = "$schema")\n')),(0,l.kt)("h3",{id:"facets-additional-definition"},"Facets additional definition"),(0,l.kt)("p",null,"You can specify the exact facet value for each field and change the facet key name. For this purposes use ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"key")," in ",(0,l.kt)("inlineCode",{parentName:"p"},"facets")," object, as in the example below. It is also possible to specify whether to create a facet for a given field using the searchable Boolean value. If the facet object is used and the searchable field is not defined, it is automatically set to true."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"model": {\n                "properties": {\n                   "a" : {\n                      "type" : "keyword",\n                      "facets": {"searchable": false}\n                   },\n                   "b" : {\n                      "type" : "keyword",\n                      "facets": {"key": "name"}\n                   },\n                   "c" : {\n                      "type" : "keyword",\n                      "facets": {"field": "TermsFacet(field="name")"}\n                   },\n                   \n\n            },\n')),(0,l.kt)("p",null,"Will generate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\nname = TermsFacet(field="b")\n\nc = TermsFacet(field = "name")\n\n')))}m.isMDXComponent=!0},6445:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/Model cheat sheet-c7e5b949072396b0809fdb47b88ae340.pdf"}}]);