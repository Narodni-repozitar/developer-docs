"use strict";(self.webpackChunknrp_tech_docs=self.webpackChunknrp_tech_docs||[]).push([[787],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,m=u["".concat(l,".").concat(d)]||u[d]||h[d]||a;return n?o.createElement(m,s(s({ref:t},c),{},{components:n})):o.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7801:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={},s="Requests",i={unversionedId:"technology/invenio/nrp-toolchain/plugins/requests",id:"technology/invenio/nrp-toolchain/plugins/requests",title:"Requests",description:"Plugin for oarepo-model-builder to allow specifying requests",source:"@site/docs/technology/invenio/nrp-toolchain/plugins/requests.md",sourceDirName:"technology/invenio/nrp-toolchain/plugins",slug:"/technology/invenio/nrp-toolchain/plugins/requests",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/plugins/requests",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/technology/invenio/nrp-toolchain/plugins/requests.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Relations",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/plugins/relations"},next:{title:"Tests",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/plugins/tests"}},l={},p=[{value:"Examples",id:"examples",level:2}],c={toc:p},u="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"requests"},"Requests"),(0,r.kt)("p",null,"Plugin for oarepo-model-builder to allow specifying requests\ntied to the base model, based on invenio requests."),(0,r.kt)("p",null,"Requests are requests for an action concerning an instance of the model (called\ntopic in this context),\nfor example to publish the topic. "),(0,r.kt)("p",null,"The requests are specified as request types (each type has its own class).\nEach request type has pre-specified actions from the invenio framework.\nThe plugin allows to customize the accept action."),(0,r.kt)("p",null,"By default, along with changing the request status,\nthe generated accept action fetches the associated record. It's up to the\ndeveloper to decide what to do with it further."),(0,r.kt)("p",null,'Types of requests can be added to the model through "requests" section\nin the yaml file of the model. There can be any number of them.\nOptions in the yaml:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"class")," Class for the Type of the request.\nUsed if the user wants to use a custom request type class.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"generate")," True by defualt, False is\ntypically used when user provides custom Type class.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"bases"),"\nBase classes for the Type class.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"actions"),"\nA list of customized actions by this type of request. Only the accept action is supported for now."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"class")," Analogous to type class for the action. By default\nit's ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/inveniosoftware/invenio-requests/blob/master/invenio_requests/customizations/actions.py"},"invenio_requests.customizations.AcceptAction"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"generate")," Analogous to type class for the action.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"bases")," Analogous to type class bases for the action."))))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"For example, the requests plugin can be used for approving\na thesis. The accept action can be used for approval.\nA simple yaml entry at the root level can be used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"requests:\n  approve-thesis: {}\n")),(0,r.kt)("p",null,"This generates all the basic files. The generated action does\nthe predefined changes in the default invenio base class, specifically\nchanges the request status, and provides a template for modifying\nthe associated thesis record (topic). The template fetches the record and\nsaves changes on it. What to do with the thesis during is up to the developer.\nThey have to replace this code with their own implementation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'## todo - do something with the record\n# topic["status"] = "accepted"\n##\n')),(0,r.kt)("p",null,"Alternatively, they can define the accept action class on their own and import\nit instead of generating."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"requests:\n  approve-thesis:\n    class: thesis.requests.ApproveAction\n    generate: False\n")))}h.isMDXComponent=!0}}]);