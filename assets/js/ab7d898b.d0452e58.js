"use strict";(self.webpackChunknrp_tech_docs=self.webpackChunknrp_tech_docs||[]).push([[597],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),y=o,m=p["".concat(s,".").concat(y)]||p[y]||d[y]||r;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},8015:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(7462),o=(n(7294),n(3905));const r={},i="Vocabularies plugin",l={unversionedId:"technology/invenio/nrp-toolchain/plugins/vocabularies",id:"technology/invenio/nrp-toolchain/plugins/vocabularies",title:"Vocabularies plugin",description:"This plugin provides support for adding vocabulary references to your model. It can link to a standard invenio vocabularies as well as to oarepo addon to support extended metadata on vocabulary items and hierarchies of vocabulary items (taxonomies).",source:"@site/docs/technology/invenio/nrp-toolchain/plugins/vocabularies.md",sourceDirName:"technology/invenio/nrp-toolchain/plugins",slug:"/technology/invenio/nrp-toolchain/plugins/vocabularies",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/plugins/vocabularies",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/technology/invenio/nrp-toolchain/plugins/vocabularies.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"OARepo model builder tests",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/plugins/tests"}},s={},u=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Invenio vocabularies - &quot;props&quot; property",id:"invenio-vocabularies---props-property",level:3},{value:"Invenio vocabularies with extended metadata",id:"invenio-vocabularies-with-extended-metadata",level:3},{value:"Hierarchical Vocabularies (Taxonomies)",id:"hierarchical-vocabularies-taxonomies",level:3}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"vocabularies-plugin"},"Vocabularies plugin"),(0,o.kt)("p",null,"This plugin provides support for adding vocabulary references to your model. It can link to a standard invenio vocabularies as well as to oarepo addon to support extended metadata on vocabulary items and hierarchies of vocabulary items (taxonomies). "),(0,o.kt)("p",null,"Please read ",(0,o.kt)("a",{parentName:"p",href:"/developer-docs/docs/technology/invenio/nrp-toolchain/libraries/vocabularies"},"details on oarepo vocabularies extension library")," at first."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"Install the plugin together with model builder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install oarepo-model-builder oarepo-model-builder-vocabularies\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"To use a vocabulary inside your model, add to your metadata file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"language:\n    type: vocabulary\n    vocabulary-type: languages\ntitle: fulltext\n")),(0,o.kt)("p",null,"This will create an invenio relation ",(0,o.kt)("a",{parentName:"p",href:"/developer-docs/docs/technology/invenio/nrp-toolchain/plugins/relations"},"(see documentation on relations)"),' that extracts "id" and "title" from the vocabulary item.'),(0,o.kt)("p",null,"So, if you later on create (HTTP POST) a record:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "title": "test",\n  "language": {\n    "id": "en"\n  }\n}\n')),(0,o.kt)("p",null,"When you read it you'll get (HTTP GET):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json5"},'{\n  "title": "test",\n  "language": {\n    "id": "en",\n    "title": {"en": "English", "cs": "Angli\u010dtina"},\n    "@v": "somthing identifying version of this item"\n  }\n}\n')),(0,o.kt)("p",null,'You can specify which top-level keys you want to include via the "keys" attribute. See ',(0,o.kt)("a",{parentName:"p",href:"https://github.com/inveniosoftware/invenio-vocabularies/blob/master/invenio_vocabularies/records/jsonschemas/vocabularies/vocabulary-v1.0.0.json"},"invenio sources")," for the list of top-level keys."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"language:\n    type: vocabulary\n    vocabulary-type: languages\n    keys: ['id', 'title', 'tags']\ntitle: fulltext\n")),(0,o.kt)("h3",{id:"invenio-vocabularies---props-property"},'Invenio vocabularies - "props" property'),(0,o.kt)("p",null,'If you want to reference something from the "props" property,\nyou can not do it directly as it does not have a schema which\nmodel builder currently understands. You can however include it if you supply your own schema. Suppose you would like to include "externalCode" field on props. Just specify:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"language:\n    type: vocabulary\n    vocabulary-type: languages\n    keys: \n    - key: props.externalCode\n      model: \n        type: keyword\ntitle: fulltext\n")),(0,o.kt)("p",null,"This way model builder knows the type of the externalCode and will embed it into your model (and validate it)."),(0,o.kt)("h3",{id:"invenio-vocabularies-with-extended-metadata"},"Invenio vocabularies with extended metadata"),(0,o.kt)("p",null,"If you use extended metadata on vocabulary items, they are represented as custom fields. Again, the model builder does not\nknow their types as they are not represented in the vocabulary schema."),(0,o.kt)("p",null,"So as in the previous case, you might use them if you provide their\nmodel type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"institution:\n    type: vocabulary\n    vocabulary-type: institutions\n    keys: \n    - key: otherNames\n      model: \n        type: array\n            items: \n                type: keyword\n")),(0,o.kt)("p",null,"In this example we are referencing ",(0,o.kt)("inlineCode",{parentName:"p"},"otherNames")," that is defined\non the ",(0,o.kt)("inlineCode",{parentName:"p"},"institutions")," vocabulary. We specify that the type is an array including items of type keyword."),(0,o.kt)("h3",{id:"hierarchical-vocabularies-taxonomies"},"Hierarchical Vocabularies (Taxonomies)"),(0,o.kt)("p",null,"If your vocabulary uses hierarchies, you can embed the ",(0,o.kt)("inlineCode",{parentName:"p"},"hierarchy"),"\nelement into your record. This is useful mostly for UI as it can show the whole context without querying for information from ancestors."),(0,o.kt)("p",null,"To use it in your model, just change ",(0,o.kt)("inlineCode",{parentName:"p"},"vocabulary")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"taxonomy"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"institution:\n    type: taxonomy\n    vocabulary-type: institutions\n")))}p.isMDXComponent=!0}}]);