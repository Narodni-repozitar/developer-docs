"use strict";(self.webpackChunknrp_tech_docs=self.webpackChunknrp_tech_docs||[]).push([[667],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var o=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,l=function(e,t){if(null==e)return{};var n,o,l={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=c(n),m=l,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return n?o.createElement(f,a(a({ref:t},d),{},{components:n})):o.createElement(f,a({ref:t},d))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,a=new Array(i);a[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[p]="string"==typeof e?e:l,a[1]=r;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},537:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var o=n(7462),l=(n(7294),n(3905));const i={},a="Custom fields",r={unversionedId:"technology/invenio/nrp-toolchain/plugins/custom_fields",id:"technology/invenio/nrp-toolchain/plugins/custom_fields",title:"Custom fields",description:"This plugin adds support for generating custom fields on a model.",source:"@site/docs/technology/invenio/nrp-toolchain/plugins/custom_fields.md",sourceDirName:"technology/invenio/nrp-toolchain/plugins",slug:"/technology/invenio/nrp-toolchain/plugins/custom_fields",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/plugins/custom_fields",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/technology/invenio/nrp-toolchain/plugins/custom_fields.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Plugins",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/plugins/"},next:{title:"OARepo model builder expansions",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/plugins/expansions"}},s={},c=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Custom fields localized to an element",id:"custom-fields-localized-to-an-element",level:3},{value:"Model",id:"model",level:4},{value:"Repository config",id:"repository-config",level:4},{value:"First run",id:"first-run",level:4},{value:"Sample document",id:"sample-document",level:4},{value:"Flat custom fields",id:"flat-custom-fields",level:3},{value:"Model",id:"model-1",level:4},{value:"Repository config",id:"repository-config-1",level:4},{value:"First run",id:"first-run-1",level:4},{value:"Sample document",id:"sample-document-1",level:4},{value:"How does it work?",id:"how-does-it-work",level:2}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"custom-fields"},"Custom fields"),(0,l.kt)("p",null,"This plugin adds support for generating custom fields on a model."),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pip install oarepo-model-builder oarepo-model-builder-cf\n")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("p",null,'There are two possible ways of having custom fields on a model: custom fields localized into an element (in RDM called "custom_fields") or to have them flat on record\'s top level. Other scenarios, such as custom fields inside the metadata element, are not (yet) supported.'),(0,l.kt)("h3",{id:"custom-fields-localized-to-an-element"},"Custom fields localized to an element"),(0,l.kt)("h4",{id:"model"},"Model"),(0,l.kt)("p",null,"Add the following snippet to your model file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"model:\n    use: invenio\n    custom-fields:\n    - element: custom_fields\n      config: TEST_CF\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"element")," - name of the element where the custom fields will be localized"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"config")," - name of the config variable")),(0,l.kt)("h4",{id:"repository-config"},"Repository config"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# invenio.cfg\n\nfrom invenio_records_resources.services.custom_fields.text import KeywordCF\n\nTEST_CF = [\n    KeywordCF('blah')\n]\n")),(0,l.kt)("h4",{id:"first-run"},"First run"),(0,l.kt)("p",null,"Before populating data to index, it is necessary to call"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"invenio oarepo cf init\n")),(0,l.kt)("p",null,"to have the mapping for custom fields initialized."),(0,l.kt)("h4",{id:"sample-document"},"Sample document"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "metadata": {\n        "title": "My Title"\n    },\n    "custom_fields": {                  // "element" from model\n        "blah": "Custom field value"    // as defined in "TEST_CF" variable\n    }\n}\n')),(0,l.kt)("h3",{id:"flat-custom-fields"},"Flat custom fields"),(0,l.kt)("p",null,"To have the custom fields inlined on record's top-level, just omit the ",(0,l.kt)("inlineCode",{parentName:"p"},"element")," field. Note that only one such declaration is allowed."),(0,l.kt)("h4",{id:"model-1"},"Model"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"model:\n    use: invenio\n    custom-fields:\n    - config: INLINE_CF\n")),(0,l.kt)("h4",{id:"repository-config-1"},"Repository config"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# invenio.cfg\n\nfrom invenio_records_resources.services.custom_fields.text import KeywordCF\n\nINLINE_CF = [\n    KeywordCF('blah')\n]\n")),(0,l.kt)("h4",{id:"first-run-1"},"First run"),(0,l.kt)("p",null,"Again, before populating data to index, it is necessary to call"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"invenio oarepo cf init\n")),(0,l.kt)("h4",{id:"sample-document-1"},"Sample document"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "metadata": {\n        "title": "My Title"\n    },\n    "blah": "Custom field value"    // as defined in "INLINE_CF" variable\n}\n')),(0,l.kt)("h2",{id:"how-does-it-work"},"How does it work?"),(0,l.kt)("p",null,"On the record level, a ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oarepo/oarepo-model-builder-cf/blob/main/tests/cf/cf/records/jsonschemas/cf-1.0.0.json"},"json schema")," with extension point (having ",(0,l.kt)("inlineCode",{parentName:"p"},"additionalProperties")," set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),") is generated."),(0,l.kt)("p",null,"In ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oarepo/oarepo-model-builder-cf/blob/main/tests/cf/cf/records/mappings/os-v2/cf/cf-1.0.0.json"},"mapping"),", a placeholder is generated with ",(0,l.kt)("inlineCode",{parentName:"p"},"dynamic: true"),". Calling ",(0,l.kt)("inlineCode",{parentName:"p"},"invenio oarepo cf init")," will populate\nthe placeholder with the actual definition of configuration custom fields."),(0,l.kt)("p",null,"On ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oarepo/oarepo-model-builder-cf/blob/main/tests/cf/cf/records/api.py"},"record API"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"DataComponent")," is added to components to make sure that custom fields values are copied to database\nrecord. Also, ",(0,l.kt)("inlineCode",{parentName:"p"},"CustomFields"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"InlinedCustomFields")," system field is added to mark that the record is using custom fields. Finally, custom field dumpers are registered to serialize the field content to opensearch."),(0,l.kt)("p",null,"On the service level, a config-dependent ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oarepo/oarepo-model-builder-cf/blob/main/tests/cf/cf/services/records/schema.py"},"marshmallow schema")," is used that loads fields dynamically upon validation."))}p.isMDXComponent=!0}}]);