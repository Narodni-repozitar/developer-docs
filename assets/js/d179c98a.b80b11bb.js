"use strict";(self.webpackChunknrp_tech_docs=self.webpackChunknrp_tech_docs||[]).push([[696],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5409:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:5},i="Generate the model",l={unversionedId:"technology/invenio/nrp-toolchain/generate-model",id:"technology/invenio/nrp-toolchain/generate-model",title:"Generate the model",description:"To generate the model, invoke nrp-cli model compile .",source:"@site/docs/technology/invenio/nrp-toolchain/generate-model.md",sourceDirName:"technology/invenio/nrp-toolchain",slug:"/technology/invenio/nrp-toolchain/generate-model",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/generate-model",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/technology/invenio/nrp-toolchain/generate-model.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Edit the metadata",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/edit-metadata"},next:{title:"Install the model",permalink:"/developer-docs/docs/technology/invenio/nrp-toolchain/install-model"}},s={},p=[{value:"Model structure",id:"model-structure",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"generate-the-model"},"Generate the model"),(0,a.kt)("p",null,"To generate the model, invoke ",(0,a.kt)("inlineCode",{parentName:"p"},"nrp-cli model compile <model-name>"),".\nThis will parse and validate the metadata file and generate invenio source files."),(0,a.kt)("h2",{id:"model-structure"},"Model structure"),(0,a.kt)("p",null,"In invenio, model consists of multiple python (and non-python files) that have to work together and stay consistent when changes are introduced.\nThese files (and classes) are:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Resource layer (http):")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"resources/config.py"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"defines the URL of the model, content negotiation"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"resources/resource.py"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"parses the HTTP request and calls the service layer to handle it"),(0,a.kt)("li",{parentName:"ul"},"modify this file if you want to add your own endpoints")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Service layer (business logic):")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"services/config.py")," contain the definition of:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"the primary url of the model (",(0,a.kt)("strong",{parentName:"li"},"TODO")," unify this with resources, not done in invenio)"),(0,a.kt)("li",{parentName:"ul"},"permission policies for the service (referenced from config, defined in ",(0,a.kt)("inlineCode",{parentName:"li"},"permissions.py"),")"),(0,a.kt)("li",{parentName:"ul"},"Marshmallow schema that will be used for deposit validation (referenced from config, defined in ",(0,a.kt)("inlineCode",{parentName:"li"},"schema.py"),")"),(0,a.kt)("li",{parentName:"ul"},"Search options - what can be searched, ordered, aggregated (referenced from config, defined in ",(0,a.kt)("inlineCode",{parentName:"li"},"search.py")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"facets.py"),")"),(0,a.kt)("li",{parentName:"ul"},"Extension points (components) to plug into the standard CRUD processing without rewriting service"),(0,a.kt)("li",{parentName:"ul"},"link to record layer"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"services/service.py"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"implements the business layer of the model"),(0,a.kt)("li",{parentName:"ul"},"the standard CRUD+search is already contained"),(0,a.kt)("li",{parentName:"ul"},"you might add specialized methods here (and call them from the resource layer if they should be accessible via API)")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Record layer (data access):")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"jsonschemas/**")," - json schema of the metadata"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mappings/**")," - definition of elasticsearch mappings (json similar to json schema, but not the same)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"api.py")," - defines the Record class to store the metadata"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"dumper.py")," - contains code that is used when storing the metadata and retrieving them from OpenSearch"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"models.py")," - contains the low-level SQLAlchemy access to the database")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Top-level")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"config.py")," - default configuration"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ext.py")," - flask registration code for the model"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"views.py")," - registration of the API endpoint"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"proxies.py")," - defines flask proxies to use the service/resource from another model")))}m.isMDXComponent=!0}}]);